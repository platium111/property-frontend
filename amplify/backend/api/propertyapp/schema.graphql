type Property @model {
  id: ID!
  loanType: String
  description: String
  imageUrls: [String]
  userId: String
  year: String
  customerName: String
  itemName: String
  price: Float
  color: String
  frameNumber: String
  machineNumber: String
  plateNumber: String
  dateBorrow: String
  cardNumber: String
  universityName: String
  gpa: Float
  graduationYear: String
  interest: Float
  fatherName: String
  motherName: String
  motherPhone: String
  fatherPhone: String
  contract: Contract @connection(name: "ContractProperties")
}

type Repayment @model {
  id: ID!
  contract: Contract @connection(name: "ContractRepayments")
  fromDate: String
  toDate: String
  totalInterestAmount: Float
  otherMoney: Float
  customerPayAmount: Float
  isPaid: Boolean
  note: String
}

type Customer @model {
  id: ID!
  firstName: String!
  lastName: String!
  middleName: String
  phoneNumbers: [String]
  dateOfBirth: String
  identityCardNo: String
  issueDate: String
  createdAt: String
  updatedAt: String
  customerImages: [String]
  address: Address @connection(name: "CustomerAddress")
  contracts: [Contract] @connection(name: "CustomerContracts", sortField: "createdAt")
}

type Contract @model {
  id: ID!
  loanStatus: String
  createdAt: String
  updatedAt: String
  repayments: [Repayment] @connection(name: "ContractRepayments")
  dateBorrow: String
  datePay: String
  borrowPurpose: String
  note: String
  customer: Customer @connection(name: "CustomerContracts")
  properties: [Property] @connection(name: "ContractProperties")
}

type PropertyConnectWithCustomer {
  items: [Property]
  nextToken: String
}

type Address @model {
  id: ID!
  alley: String
  city: String
  district: String
  hamlet: String
  homeNumber: String
  lane: String
  province: String
  street: String
  village: String
  customer: Customer @connection(name: "CustomerAddress")
}

type CustomerResponse {
  items: [Customer]
  nextToken: String
}

input CustomerInputData {
  customer: CustomerInput
  address: AddressInput
}

input CustomerInput {
  id: ID!
  firstName: String
}

input AddressInput {
  id: ID!
  homeNumber: String
}

type Mutation {
  propertiesForCustomer(contractId: ID!, limit: Int, nextToken: String): PropertyConnectWithCustomer
  batchUpdateCustomerWithChildren(input: CustomerInputData, nextToken: String): CustomerResponse
}
