type Property @model @key(name: "byContract", fields: ["contractId", "itemName"]) {
  id: ID!
  loanType: String
  description: String
  imageUrls: [String]
  userId: String
  year: String
  customerName: String
  itemName: String
  price: String
  color: String
  frameNumber: String
  machineNumber: String
  plateNumber: String
  dateBorrow: String
  contractId: ID
  cardNumber: String
  universityName: String
  gpa: Float
  graduationYear: String
  interest: Float
  fatherName: String
  motherName: String
  motherPhone: String
  fatherPhone: String
}

type Repayment @model @key(name: "byContract", fields: ["contractId"]) {
  id: ID!
  contractId: ID
  fromDate: String
  toDate: String
  totalInterestAmount: Float
  otherMoney: Float
  customerPayAmount: Float
  isPaid: Boolean
  note: String
}

type Customer @model @key(name: "listCustomerByCreatedAt", fields: ["createdAt"], queryField: "listCustomerByCreatedAt") {
  id: ID!
  firstName: String!
  lastName: String!
  middleName: String
  phoneNumbers: [String]
  dateOfBirth: String
  address: Address @connection(fields: ["addressId"])
  addressId: ID!
  identityCardNo: String
  issueDate: String
  createdAt: AWSDateTime
  customerImages: [String]
  contracts: [Contract] @connection(keyName: "byCustomer", fields: ["id"])
}

type Contract @model @key(name: "byCustomer", fields: ["customerId"]) {
  id: ID!
  customerId: ID
  loanStatus: String
  createdAt: AWSDateTime
  repayments: [Repayment] @connection(keyName: "byContract", fields: ["id"])
  dateBorrow: String
  datePay: String
  borrowPurpose: String
  note: String
  properties: [Property] @connection(keyName: "byContract", fields: ["id"])
}

type PropertyConnectWithCustomer {
  items: [Property]
  nextToken: String
}

"""
CUSTOMER BATCH MUTATION
"""
type CustomerResponse {
  items: [Customer]
  nextToken: String
}

input CustomerInputData {
  customer: CustomerInput
  address: AddressInput
}

input CustomerInput {
  id: ID!
  firstName: String
}

input AddressInput {
  id: ID!
  homeNumber: String
}

type Mutation {
  propertiesForCustomer(contractId: ID!, limit: Int, nextToken: String): PropertyConnectWithCustomer
  batchUpdateCustomerWithChildren(input: CustomerInputData, nextToken: String): CustomerResponse
}

"""
-------------------------
"""
type Address @model {
  id: ID!
  homeNumber: String
  street: String
  hamlet: String
  village: String
  lane: String
  alley: String
  district: String
  province: String
  city: String
}
